-- Define the Discord webhook URL
local discordWebhookURL = "https://discord.com/api/webhooks/1252188568097656932/YqTUBeqWy1ZZUIVHazSohI8FHCdsLJlByyQpeTpPhxBRwyH6kawyS7Td-F3X7aybdgJF"

-- player name
local Whatplayer = game.Players.LocalPlayer

-- Define the biome information
local biomeData = {
    [17404478111] = {name = "Blizzard", waterColor = "Baby blue"},
    [17189708235] = {name = "Normal", waterColor = "Cyan"},
    [17189701971] = {name = "Radiation", waterColor = "Really black"},
    [9064172942] = {name = "Starry", waterColor = "Electric blue"}, 
    [17189699594] = {name = "Flame", waterColor = "Neon orange"},
    [9064101181] = {name = "Nature", waterColor = "Electric blue"},
    [9064286633] = {name = "Storm", waterColor = "Cyan"}
}

-- Define the list of possible bosses
local BiomeBosses = {"Unknown Machine", "Archmage", "The Fallen", "Steve", "The Ripper", "The Paladin", "The Controller"}

-- Function to send a message to the Discord webhook
local function sendDiscordMessage(message)
    local HttpService = game:GetService("HttpService")
    local payload = HttpService:JSONEncode({content = message})

    local request = http_request or request or (syn and syn.request) or http.request
    local response = request({
        Url = discordWebhookURL,
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = payload
    })
end

-- Function to detect the sky
local WhatSky, normalSky = pcall(function()
    return game:GetService("Lighting").NormalSky
end)

-- rejoin things
local ts = game:GetService("TeleportService")
local p = game:GetService("Players").LocalPlayer

-- Function to detect the current biome
function detectBiome()
    local backgroundMusic = game:GetService("Workspace"):FindFirstChild("backgroundmusic")
    local waterColor = game:GetService("Workspace").Landscape.Water.BrickColor.Name
    local skyName = game:GetService("Lighting"):FindFirstChild("SkyboxScript")

    if backgroundMusic then
        local musicId = tonumber(backgroundMusic.SoundId:match("%d+"))

        for id, biomeInfo in pairs(biomeData) do
            if tostring(musicId) == tostring(id) then
                if waterColor == biomeInfo.waterColor then
                    if biomeInfo.name == "Normal" then
                        if WhatSky then
                            if normalSky then
                                sendDiscordMessage(Whatplayer.Name .. " Got: Normal Biome")
                                return
                            end
                        else
                            sendDiscordMessage("Night Biome leaving")
                            game.Players.LocalPlayer:Kick("rejoin")
                        end
                    else
                        sendDiscordMessage(Whatplayer.Name .. "Got: " .. biomeInfo.name .. " leaving")
                        game.Players.LocalPlayer:Kick("rejoin")
                        return
                    end
                end
            end
        end

        sendDiscordMessage("Rare Biome Found By:'" .. Whatplayer.Name .. "' Water Color: " .. waterColor .. " @here")
        wait(10)
    else
        -- Check if there is a boss in the list
        for _, boss in ipairs(BiomeBosses) do
            local boss = game:GetService("Workspace"):FindFirstChild(boss)
            if boss then
                sendDiscordMessage(Whatplayer.Name .. " Found Boss: " .. boss.Name .. " leaving")
                game.Players.LocalPlayer:Kick("rejoin")
                return
            end
        end
        sendDiscordMessage("Unknown Boss")
    end
end

sendDiscordMessage("-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-")

while true do
    detectBiome()
    for _, boss in ipairs(BiomeBosses) do
        local boss = game:GetService("Workspace"):FindFirstChild(boss)
        if boss then
            sendDiscordMessage(Whatplayer.Name .. " Found Boss: " .. boss.Name .. " leaving")
            game.Players.LocalPlayer:Kick("\nRejoining...")
        end
    end
    wait(3)
end
